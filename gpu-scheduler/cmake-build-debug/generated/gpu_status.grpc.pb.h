// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gpu_status.proto
#ifndef GRPC_gpu_5fstatus_2eproto__INCLUDED
#define GRPC_gpu_5fstatus_2eproto__INCLUDED

#include "gpu_status.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace cabinet {

class UpdateStatus final {
 public:
  static constexpr char const* service_full_name() {
    return "cabinet.UpdateStatus";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // For periodic GPU status updates.
    virtual ::grpc::Status UpdateGpuStatus(::grpc::ClientContext* context, const ::cabinet::GpuStatus& request, ::cabinet::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cabinet::Reply>> AsyncUpdateGpuStatus(::grpc::ClientContext* context, const ::cabinet::GpuStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cabinet::Reply>>(AsyncUpdateGpuStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cabinet::Reply>> PrepareAsyncUpdateGpuStatus(::grpc::ClientContext* context, const ::cabinet::GpuStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cabinet::Reply>>(PrepareAsyncUpdateGpuStatusRaw(context, request, cq));
    }
    // For propagating final task assignment.
    virtual ::grpc::Status UpdateTaskAssignment(::grpc::ClientContext* context, const ::cabinet::TaskAssignment& request, ::cabinet::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cabinet::Reply>> AsyncUpdateTaskAssignment(::grpc::ClientContext* context, const ::cabinet::TaskAssignment& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cabinet::Reply>>(AsyncUpdateTaskAssignmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cabinet::Reply>> PrepareAsyncUpdateTaskAssignment(::grpc::ClientContext* context, const ::cabinet::TaskAssignment& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cabinet::Reply>>(PrepareAsyncUpdateTaskAssignmentRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // For periodic GPU status updates.
      virtual void UpdateGpuStatus(::grpc::ClientContext* context, const ::cabinet::GpuStatus* request, ::cabinet::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateGpuStatus(::grpc::ClientContext* context, const ::cabinet::GpuStatus* request, ::cabinet::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // For propagating final task assignment.
      virtual void UpdateTaskAssignment(::grpc::ClientContext* context, const ::cabinet::TaskAssignment* request, ::cabinet::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateTaskAssignment(::grpc::ClientContext* context, const ::cabinet::TaskAssignment* request, ::cabinet::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cabinet::Reply>* AsyncUpdateGpuStatusRaw(::grpc::ClientContext* context, const ::cabinet::GpuStatus& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cabinet::Reply>* PrepareAsyncUpdateGpuStatusRaw(::grpc::ClientContext* context, const ::cabinet::GpuStatus& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cabinet::Reply>* AsyncUpdateTaskAssignmentRaw(::grpc::ClientContext* context, const ::cabinet::TaskAssignment& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cabinet::Reply>* PrepareAsyncUpdateTaskAssignmentRaw(::grpc::ClientContext* context, const ::cabinet::TaskAssignment& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status UpdateGpuStatus(::grpc::ClientContext* context, const ::cabinet::GpuStatus& request, ::cabinet::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cabinet::Reply>> AsyncUpdateGpuStatus(::grpc::ClientContext* context, const ::cabinet::GpuStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cabinet::Reply>>(AsyncUpdateGpuStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cabinet::Reply>> PrepareAsyncUpdateGpuStatus(::grpc::ClientContext* context, const ::cabinet::GpuStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cabinet::Reply>>(PrepareAsyncUpdateGpuStatusRaw(context, request, cq));
    }
    ::grpc::Status UpdateTaskAssignment(::grpc::ClientContext* context, const ::cabinet::TaskAssignment& request, ::cabinet::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cabinet::Reply>> AsyncUpdateTaskAssignment(::grpc::ClientContext* context, const ::cabinet::TaskAssignment& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cabinet::Reply>>(AsyncUpdateTaskAssignmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cabinet::Reply>> PrepareAsyncUpdateTaskAssignment(::grpc::ClientContext* context, const ::cabinet::TaskAssignment& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cabinet::Reply>>(PrepareAsyncUpdateTaskAssignmentRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void UpdateGpuStatus(::grpc::ClientContext* context, const ::cabinet::GpuStatus* request, ::cabinet::Reply* response, std::function<void(::grpc::Status)>) override;
      void UpdateGpuStatus(::grpc::ClientContext* context, const ::cabinet::GpuStatus* request, ::cabinet::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateTaskAssignment(::grpc::ClientContext* context, const ::cabinet::TaskAssignment* request, ::cabinet::Reply* response, std::function<void(::grpc::Status)>) override;
      void UpdateTaskAssignment(::grpc::ClientContext* context, const ::cabinet::TaskAssignment* request, ::cabinet::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cabinet::Reply>* AsyncUpdateGpuStatusRaw(::grpc::ClientContext* context, const ::cabinet::GpuStatus& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cabinet::Reply>* PrepareAsyncUpdateGpuStatusRaw(::grpc::ClientContext* context, const ::cabinet::GpuStatus& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cabinet::Reply>* AsyncUpdateTaskAssignmentRaw(::grpc::ClientContext* context, const ::cabinet::TaskAssignment& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cabinet::Reply>* PrepareAsyncUpdateTaskAssignmentRaw(::grpc::ClientContext* context, const ::cabinet::TaskAssignment& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateGpuStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateTaskAssignment_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // For periodic GPU status updates.
    virtual ::grpc::Status UpdateGpuStatus(::grpc::ServerContext* context, const ::cabinet::GpuStatus* request, ::cabinet::Reply* response);
    // For propagating final task assignment.
    virtual ::grpc::Status UpdateTaskAssignment(::grpc::ServerContext* context, const ::cabinet::TaskAssignment* request, ::cabinet::Reply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateGpuStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateGpuStatus() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UpdateGpuStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGpuStatus(::grpc::ServerContext* /*context*/, const ::cabinet::GpuStatus* /*request*/, ::cabinet::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGpuStatus(::grpc::ServerContext* context, ::cabinet::GpuStatus* request, ::grpc::ServerAsyncResponseWriter< ::cabinet::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateTaskAssignment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateTaskAssignment() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateTaskAssignment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTaskAssignment(::grpc::ServerContext* /*context*/, const ::cabinet::TaskAssignment* /*request*/, ::cabinet::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateTaskAssignment(::grpc::ServerContext* context, ::cabinet::TaskAssignment* request, ::grpc::ServerAsyncResponseWriter< ::cabinet::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UpdateGpuStatus<WithAsyncMethod_UpdateTaskAssignment<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_UpdateGpuStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateGpuStatus() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cabinet::GpuStatus, ::cabinet::Reply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cabinet::GpuStatus* request, ::cabinet::Reply* response) { return this->UpdateGpuStatus(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateGpuStatus(
        ::grpc::MessageAllocator< ::cabinet::GpuStatus, ::cabinet::Reply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cabinet::GpuStatus, ::cabinet::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateGpuStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGpuStatus(::grpc::ServerContext* /*context*/, const ::cabinet::GpuStatus* /*request*/, ::cabinet::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateGpuStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::cabinet::GpuStatus* /*request*/, ::cabinet::Reply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateTaskAssignment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateTaskAssignment() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cabinet::TaskAssignment, ::cabinet::Reply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cabinet::TaskAssignment* request, ::cabinet::Reply* response) { return this->UpdateTaskAssignment(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateTaskAssignment(
        ::grpc::MessageAllocator< ::cabinet::TaskAssignment, ::cabinet::Reply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cabinet::TaskAssignment, ::cabinet::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateTaskAssignment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTaskAssignment(::grpc::ServerContext* /*context*/, const ::cabinet::TaskAssignment* /*request*/, ::cabinet::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateTaskAssignment(
      ::grpc::CallbackServerContext* /*context*/, const ::cabinet::TaskAssignment* /*request*/, ::cabinet::Reply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_UpdateGpuStatus<WithCallbackMethod_UpdateTaskAssignment<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UpdateGpuStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateGpuStatus() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UpdateGpuStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGpuStatus(::grpc::ServerContext* /*context*/, const ::cabinet::GpuStatus* /*request*/, ::cabinet::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateTaskAssignment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateTaskAssignment() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateTaskAssignment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTaskAssignment(::grpc::ServerContext* /*context*/, const ::cabinet::TaskAssignment* /*request*/, ::cabinet::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateGpuStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateGpuStatus() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UpdateGpuStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGpuStatus(::grpc::ServerContext* /*context*/, const ::cabinet::GpuStatus* /*request*/, ::cabinet::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGpuStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateTaskAssignment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateTaskAssignment() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateTaskAssignment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTaskAssignment(::grpc::ServerContext* /*context*/, const ::cabinet::TaskAssignment* /*request*/, ::cabinet::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateTaskAssignment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateGpuStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateGpuStatus() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateGpuStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateGpuStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGpuStatus(::grpc::ServerContext* /*context*/, const ::cabinet::GpuStatus* /*request*/, ::cabinet::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateGpuStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateTaskAssignment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateTaskAssignment() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateTaskAssignment(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateTaskAssignment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTaskAssignment(::grpc::ServerContext* /*context*/, const ::cabinet::TaskAssignment* /*request*/, ::cabinet::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateTaskAssignment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateGpuStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateGpuStatus() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cabinet::GpuStatus, ::cabinet::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cabinet::GpuStatus, ::cabinet::Reply>* streamer) {
                       return this->StreamedUpdateGpuStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateGpuStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateGpuStatus(::grpc::ServerContext* /*context*/, const ::cabinet::GpuStatus* /*request*/, ::cabinet::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateGpuStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cabinet::GpuStatus,::cabinet::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateTaskAssignment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateTaskAssignment() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cabinet::TaskAssignment, ::cabinet::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cabinet::TaskAssignment, ::cabinet::Reply>* streamer) {
                       return this->StreamedUpdateTaskAssignment(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateTaskAssignment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateTaskAssignment(::grpc::ServerContext* /*context*/, const ::cabinet::TaskAssignment* /*request*/, ::cabinet::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateTaskAssignment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cabinet::TaskAssignment,::cabinet::Reply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UpdateGpuStatus<WithStreamedUnaryMethod_UpdateTaskAssignment<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UpdateGpuStatus<WithStreamedUnaryMethod_UpdateTaskAssignment<Service > > StreamedService;
};

class Scheduler final {
 public:
  static constexpr char const* service_full_name() {
    return "cabinet.Scheduler";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Execute a task on a node.
    virtual ::grpc::Status ExecuteTask(::grpc::ClientContext* context, const ::cabinet::TaskStatus& request, ::cabinet::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cabinet::Reply>> AsyncExecuteTask(::grpc::ClientContext* context, const ::cabinet::TaskStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cabinet::Reply>>(AsyncExecuteTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cabinet::Reply>> PrepareAsyncExecuteTask(::grpc::ClientContext* context, const ::cabinet::TaskStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cabinet::Reply>>(PrepareAsyncExecuteTaskRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Execute a task on a node.
      virtual void ExecuteTask(::grpc::ClientContext* context, const ::cabinet::TaskStatus* request, ::cabinet::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteTask(::grpc::ClientContext* context, const ::cabinet::TaskStatus* request, ::cabinet::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cabinet::Reply>* AsyncExecuteTaskRaw(::grpc::ClientContext* context, const ::cabinet::TaskStatus& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cabinet::Reply>* PrepareAsyncExecuteTaskRaw(::grpc::ClientContext* context, const ::cabinet::TaskStatus& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ExecuteTask(::grpc::ClientContext* context, const ::cabinet::TaskStatus& request, ::cabinet::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cabinet::Reply>> AsyncExecuteTask(::grpc::ClientContext* context, const ::cabinet::TaskStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cabinet::Reply>>(AsyncExecuteTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cabinet::Reply>> PrepareAsyncExecuteTask(::grpc::ClientContext* context, const ::cabinet::TaskStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cabinet::Reply>>(PrepareAsyncExecuteTaskRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ExecuteTask(::grpc::ClientContext* context, const ::cabinet::TaskStatus* request, ::cabinet::Reply* response, std::function<void(::grpc::Status)>) override;
      void ExecuteTask(::grpc::ClientContext* context, const ::cabinet::TaskStatus* request, ::cabinet::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cabinet::Reply>* AsyncExecuteTaskRaw(::grpc::ClientContext* context, const ::cabinet::TaskStatus& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cabinet::Reply>* PrepareAsyncExecuteTaskRaw(::grpc::ClientContext* context, const ::cabinet::TaskStatus& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteTask_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Execute a task on a node.
    virtual ::grpc::Status ExecuteTask(::grpc::ServerContext* context, const ::cabinet::TaskStatus* request, ::cabinet::Reply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteTask() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ExecuteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteTask(::grpc::ServerContext* /*context*/, const ::cabinet::TaskStatus* /*request*/, ::cabinet::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteTask(::grpc::ServerContext* context, ::cabinet::TaskStatus* request, ::grpc::ServerAsyncResponseWriter< ::cabinet::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ExecuteTask<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ExecuteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecuteTask() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cabinet::TaskStatus, ::cabinet::Reply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cabinet::TaskStatus* request, ::cabinet::Reply* response) { return this->ExecuteTask(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteTask(
        ::grpc::MessageAllocator< ::cabinet::TaskStatus, ::cabinet::Reply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cabinet::TaskStatus, ::cabinet::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecuteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteTask(::grpc::ServerContext* /*context*/, const ::cabinet::TaskStatus* /*request*/, ::cabinet::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteTask(
      ::grpc::CallbackServerContext* /*context*/, const ::cabinet::TaskStatus* /*request*/, ::cabinet::Reply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ExecuteTask<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ExecuteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteTask() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ExecuteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteTask(::grpc::ServerContext* /*context*/, const ::cabinet::TaskStatus* /*request*/, ::cabinet::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteTask() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ExecuteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteTask(::grpc::ServerContext* /*context*/, const ::cabinet::TaskStatus* /*request*/, ::cabinet::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecuteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecuteTask() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecuteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteTask(::grpc::ServerContext* /*context*/, const ::cabinet::TaskStatus* /*request*/, ::cabinet::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecuteTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteTask() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cabinet::TaskStatus, ::cabinet::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cabinet::TaskStatus, ::cabinet::Reply>* streamer) {
                       return this->StreamedExecuteTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteTask(::grpc::ServerContext* /*context*/, const ::cabinet::TaskStatus* /*request*/, ::cabinet::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cabinet::TaskStatus,::cabinet::Reply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ExecuteTask<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ExecuteTask<Service > StreamedService;
};

}  // namespace cabinet


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_gpu_5fstatus_2eproto__INCLUDED
