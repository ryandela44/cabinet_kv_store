// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: gpu_status.proto
// Protobuf C++ Version: 5.29.3

#ifndef gpu_5fstatus_2eproto_2epb_2eh
#define gpu_5fstatus_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_gpu_5fstatus_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_gpu_5fstatus_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_gpu_5fstatus_2eproto;
namespace cabinet {
class GpuStatus;
struct GpuStatusDefaultTypeInternal;
extern GpuStatusDefaultTypeInternal _GpuStatus_default_instance_;
class Reply;
struct ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class TaskAssignment;
struct TaskAssignmentDefaultTypeInternal;
extern TaskAssignmentDefaultTypeInternal _TaskAssignment_default_instance_;
class TaskStatus;
struct TaskStatusDefaultTypeInternal;
extern TaskStatusDefaultTypeInternal _TaskStatus_default_instance_;
}  // namespace cabinet
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cabinet {

// ===================================================================


// -------------------------------------------------------------------

class TaskStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cabinet.TaskStatus) */ {
 public:
  inline TaskStatus() : TaskStatus(nullptr) {}
  ~TaskStatus() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TaskStatus* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TaskStatus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TaskStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline TaskStatus(const TaskStatus& from) : TaskStatus(nullptr, from) {}
  inline TaskStatus(TaskStatus&& from) noexcept
      : TaskStatus(nullptr, std::move(from)) {}
  inline TaskStatus& operator=(const TaskStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskStatus& operator=(TaskStatus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskStatus* internal_default_instance() {
    return reinterpret_cast<const TaskStatus*>(
        &_TaskStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(TaskStatus& a, TaskStatus& b) { a.Swap(&b); }
  inline void Swap(TaskStatus* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskStatus* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TaskStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TaskStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TaskStatus& from) { TaskStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TaskStatus* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cabinet.TaskStatus"; }

 protected:
  explicit TaskStatus(::google::protobuf::Arena* arena);
  TaskStatus(::google::protobuf::Arena* arena, const TaskStatus& from);
  TaskStatus(::google::protobuf::Arena* arena, TaskStatus&& from) noexcept
      : TaskStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSubmitTimeFieldNumber = 4,
    kStartTimeFieldNumber = 5,
    kGpuReqFieldNumber = 6,
    kTaskIdFieldNumber = 1,
    kAssignedBoardFieldNumber = 2,
    kStatusFieldNumber = 3,
    kDeadlineFieldNumber = 7,
  };
  // string submit_time = 4;
  void clear_submit_time() ;
  const std::string& submit_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_submit_time(Arg_&& arg, Args_... args);
  std::string* mutable_submit_time();
  PROTOBUF_NODISCARD std::string* release_submit_time();
  void set_allocated_submit_time(std::string* value);

  private:
  const std::string& _internal_submit_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_submit_time(
      const std::string& value);
  std::string* _internal_mutable_submit_time();

  public:
  // string start_time = 5;
  void clear_start_time() ;
  const std::string& start_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_start_time(Arg_&& arg, Args_... args);
  std::string* mutable_start_time();
  PROTOBUF_NODISCARD std::string* release_start_time();
  void set_allocated_start_time(std::string* value);

  private:
  const std::string& _internal_start_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_time(
      const std::string& value);
  std::string* _internal_mutable_start_time();

  public:
  // string gpu_req = 6;
  void clear_gpu_req() ;
  const std::string& gpu_req() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_gpu_req(Arg_&& arg, Args_... args);
  std::string* mutable_gpu_req();
  PROTOBUF_NODISCARD std::string* release_gpu_req();
  void set_allocated_gpu_req(std::string* value);

  private:
  const std::string& _internal_gpu_req() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gpu_req(
      const std::string& value);
  std::string* _internal_mutable_gpu_req();

  public:
  // int32 task_id = 1;
  void clear_task_id() ;
  ::int32_t task_id() const;
  void set_task_id(::int32_t value);

  private:
  ::int32_t _internal_task_id() const;
  void _internal_set_task_id(::int32_t value);

  public:
  // int32 assigned_board = 2;
  void clear_assigned_board() ;
  ::int32_t assigned_board() const;
  void set_assigned_board(::int32_t value);

  private:
  ::int32_t _internal_assigned_board() const;
  void _internal_set_assigned_board(::int32_t value);

  public:
  // int32 status = 3;
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // int32 deadline = 7;
  void clear_deadline() ;
  ::int32_t deadline() const;
  void set_deadline(::int32_t value);

  private:
  ::int32_t _internal_deadline() const;
  void _internal_set_deadline(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cabinet.TaskStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TaskStatus& from_msg);
    ::google::protobuf::internal::ArenaStringPtr submit_time_;
    ::google::protobuf::internal::ArenaStringPtr start_time_;
    ::google::protobuf::internal::ArenaStringPtr gpu_req_;
    ::int32_t task_id_;
    ::int32_t assigned_board_;
    ::int32_t status_;
    ::int32_t deadline_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gpu_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class TaskAssignment final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cabinet.TaskAssignment) */ {
 public:
  inline TaskAssignment() : TaskAssignment(nullptr) {}
  ~TaskAssignment() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TaskAssignment* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TaskAssignment));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TaskAssignment(
      ::google::protobuf::internal::ConstantInitialized);

  inline TaskAssignment(const TaskAssignment& from) : TaskAssignment(nullptr, from) {}
  inline TaskAssignment(TaskAssignment&& from) noexcept
      : TaskAssignment(nullptr, std::move(from)) {}
  inline TaskAssignment& operator=(const TaskAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskAssignment& operator=(TaskAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskAssignment* internal_default_instance() {
    return reinterpret_cast<const TaskAssignment*>(
        &_TaskAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(TaskAssignment& a, TaskAssignment& b) { a.Swap(&b); }
  inline void Swap(TaskAssignment* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskAssignment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskAssignment* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TaskAssignment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TaskAssignment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TaskAssignment& from) { TaskAssignment::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TaskAssignment* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cabinet.TaskAssignment"; }

 protected:
  explicit TaskAssignment(::google::protobuf::Arena* arena);
  TaskAssignment(::google::protobuf::Arena* arena, const TaskAssignment& from);
  TaskAssignment(::google::protobuf::Arena* arena, TaskAssignment&& from) noexcept
      : TaskAssignment(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSubmitTimeFieldNumber = 4,
    kStartTimeFieldNumber = 5,
    kGpuReqFieldNumber = 6,
    kTaskIdFieldNumber = 1,
    kAssignedBoardFieldNumber = 2,
    kStatusFieldNumber = 3,
    kDeadlineFieldNumber = 7,
  };
  // string submit_time = 4;
  void clear_submit_time() ;
  const std::string& submit_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_submit_time(Arg_&& arg, Args_... args);
  std::string* mutable_submit_time();
  PROTOBUF_NODISCARD std::string* release_submit_time();
  void set_allocated_submit_time(std::string* value);

  private:
  const std::string& _internal_submit_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_submit_time(
      const std::string& value);
  std::string* _internal_mutable_submit_time();

  public:
  // string start_time = 5;
  void clear_start_time() ;
  const std::string& start_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_start_time(Arg_&& arg, Args_... args);
  std::string* mutable_start_time();
  PROTOBUF_NODISCARD std::string* release_start_time();
  void set_allocated_start_time(std::string* value);

  private:
  const std::string& _internal_start_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_time(
      const std::string& value);
  std::string* _internal_mutable_start_time();

  public:
  // string gpu_req = 6;
  void clear_gpu_req() ;
  const std::string& gpu_req() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_gpu_req(Arg_&& arg, Args_... args);
  std::string* mutable_gpu_req();
  PROTOBUF_NODISCARD std::string* release_gpu_req();
  void set_allocated_gpu_req(std::string* value);

  private:
  const std::string& _internal_gpu_req() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gpu_req(
      const std::string& value);
  std::string* _internal_mutable_gpu_req();

  public:
  // int32 task_id = 1;
  void clear_task_id() ;
  ::int32_t task_id() const;
  void set_task_id(::int32_t value);

  private:
  ::int32_t _internal_task_id() const;
  void _internal_set_task_id(::int32_t value);

  public:
  // int32 assigned_board = 2;
  void clear_assigned_board() ;
  ::int32_t assigned_board() const;
  void set_assigned_board(::int32_t value);

  private:
  ::int32_t _internal_assigned_board() const;
  void _internal_set_assigned_board(::int32_t value);

  public:
  // int32 status = 3;
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // int32 deadline = 7;
  void clear_deadline() ;
  ::int32_t deadline() const;
  void set_deadline(::int32_t value);

  private:
  ::int32_t _internal_deadline() const;
  void _internal_set_deadline(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cabinet.TaskAssignment)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TaskAssignment& from_msg);
    ::google::protobuf::internal::ArenaStringPtr submit_time_;
    ::google::protobuf::internal::ArenaStringPtr start_time_;
    ::google::protobuf::internal::ArenaStringPtr gpu_req_;
    ::int32_t task_id_;
    ::int32_t assigned_board_;
    ::int32_t status_;
    ::int32_t deadline_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gpu_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class Reply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cabinet.Reply) */ {
 public:
  inline Reply() : Reply(nullptr) {}
  ~Reply() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Reply* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Reply));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Reply(
      ::google::protobuf::internal::ConstantInitialized);

  inline Reply(const Reply& from) : Reply(nullptr, from) {}
  inline Reply(Reply&& from) noexcept
      : Reply(nullptr, std::move(from)) {}
  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reply& operator=(Reply&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Reply& default_instance() {
    return *internal_default_instance();
  }
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
        &_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Reply& a, Reply& b) { a.Swap(&b); }
  inline void Swap(Reply* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Reply* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Reply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Reply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Reply& from) { Reply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Reply* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cabinet.Reply"; }

 protected:
  explicit Reply(::google::protobuf::Arena* arena);
  Reply(::google::protobuf::Arena* arena, const Reply& from);
  Reply(::google::protobuf::Arena* arena, Reply&& from) noexcept
      : Reply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReplyFieldNumber = 1,
  };
  // string reply = 1;
  void clear_reply() ;
  const std::string& reply() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reply(Arg_&& arg, Args_... args);
  std::string* mutable_reply();
  PROTOBUF_NODISCARD std::string* release_reply();
  void set_allocated_reply(std::string* value);

  private:
  const std::string& _internal_reply() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply(
      const std::string& value);
  std::string* _internal_mutable_reply();

  public:
  // @@protoc_insertion_point(class_scope:cabinet.Reply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      27, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Reply& from_msg);
    ::google::protobuf::internal::ArenaStringPtr reply_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gpu_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class GpuStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cabinet.GpuStatus) */ {
 public:
  inline GpuStatus() : GpuStatus(nullptr) {}
  ~GpuStatus() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GpuStatus* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GpuStatus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GpuStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline GpuStatus(const GpuStatus& from) : GpuStatus(nullptr, from) {}
  inline GpuStatus(GpuStatus&& from) noexcept
      : GpuStatus(nullptr, std::move(from)) {}
  inline GpuStatus& operator=(const GpuStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuStatus& operator=(GpuStatus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpuStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpuStatus* internal_default_instance() {
    return reinterpret_cast<const GpuStatus*>(
        &_GpuStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(GpuStatus& a, GpuStatus& b) { a.Swap(&b); }
  inline void Swap(GpuStatus* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpuStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpuStatus* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GpuStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GpuStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GpuStatus& from) { GpuStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GpuStatus* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cabinet.GpuStatus"; }

 protected:
  explicit GpuStatus(::google::protobuf::Arena* arena);
  GpuStatus(::google::protobuf::Arena* arena, const GpuStatus& from);
  GpuStatus(::google::protobuf::Arena* arena, GpuStatus&& from) noexcept
      : GpuStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBoardIdFieldNumber = 1,
    kAvailableGpUsFieldNumber = 2,
    kCurrentLoadFieldNumber = 3,
    kJobQueueLengthFieldNumber = 4,
    kMemoryUsageFieldNumber = 5,
    kTemperatureFieldNumber = 6,
    kClockFreqFieldNumber = 7,
  };
  // int32 board_id = 1;
  void clear_board_id() ;
  ::int32_t board_id() const;
  void set_board_id(::int32_t value);

  private:
  ::int32_t _internal_board_id() const;
  void _internal_set_board_id(::int32_t value);

  public:
  // int32 available_gp_us = 2;
  void clear_available_gp_us() ;
  ::int32_t available_gp_us() const;
  void set_available_gp_us(::int32_t value);

  private:
  ::int32_t _internal_available_gp_us() const;
  void _internal_set_available_gp_us(::int32_t value);

  public:
  // float current_load = 3;
  void clear_current_load() ;
  float current_load() const;
  void set_current_load(float value);

  private:
  float _internal_current_load() const;
  void _internal_set_current_load(float value);

  public:
  // int32 job_queue_length = 4;
  void clear_job_queue_length() ;
  ::int32_t job_queue_length() const;
  void set_job_queue_length(::int32_t value);

  private:
  ::int32_t _internal_job_queue_length() const;
  void _internal_set_job_queue_length(::int32_t value);

  public:
  // float memory_usage = 5;
  void clear_memory_usage() ;
  float memory_usage() const;
  void set_memory_usage(float value);

  private:
  float _internal_memory_usage() const;
  void _internal_set_memory_usage(float value);

  public:
  // float temperature = 6;
  void clear_temperature() ;
  float temperature() const;
  void set_temperature(float value);

  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);

  public:
  // float clock_freq = 7;
  void clear_clock_freq() ;
  float clock_freq() const;
  void set_clock_freq(float value);

  private:
  float _internal_clock_freq() const;
  void _internal_set_clock_freq(float value);

  public:
  // @@protoc_insertion_point(class_scope:cabinet.GpuStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GpuStatus& from_msg);
    ::int32_t board_id_;
    ::int32_t available_gp_us_;
    float current_load_;
    ::int32_t job_queue_length_;
    float memory_usage_;
    float temperature_;
    float clock_freq_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gpu_5fstatus_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GpuStatus

// int32 board_id = 1;
inline void GpuStatus::clear_board_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.board_id_ = 0;
}
inline ::int32_t GpuStatus::board_id() const {
  // @@protoc_insertion_point(field_get:cabinet.GpuStatus.board_id)
  return _internal_board_id();
}
inline void GpuStatus::set_board_id(::int32_t value) {
  _internal_set_board_id(value);
  // @@protoc_insertion_point(field_set:cabinet.GpuStatus.board_id)
}
inline ::int32_t GpuStatus::_internal_board_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.board_id_;
}
inline void GpuStatus::_internal_set_board_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.board_id_ = value;
}

// int32 available_gp_us = 2;
inline void GpuStatus::clear_available_gp_us() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.available_gp_us_ = 0;
}
inline ::int32_t GpuStatus::available_gp_us() const {
  // @@protoc_insertion_point(field_get:cabinet.GpuStatus.available_gp_us)
  return _internal_available_gp_us();
}
inline void GpuStatus::set_available_gp_us(::int32_t value) {
  _internal_set_available_gp_us(value);
  // @@protoc_insertion_point(field_set:cabinet.GpuStatus.available_gp_us)
}
inline ::int32_t GpuStatus::_internal_available_gp_us() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.available_gp_us_;
}
inline void GpuStatus::_internal_set_available_gp_us(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.available_gp_us_ = value;
}

// float current_load = 3;
inline void GpuStatus::clear_current_load() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_load_ = 0;
}
inline float GpuStatus::current_load() const {
  // @@protoc_insertion_point(field_get:cabinet.GpuStatus.current_load)
  return _internal_current_load();
}
inline void GpuStatus::set_current_load(float value) {
  _internal_set_current_load(value);
  // @@protoc_insertion_point(field_set:cabinet.GpuStatus.current_load)
}
inline float GpuStatus::_internal_current_load() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_load_;
}
inline void GpuStatus::_internal_set_current_load(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_load_ = value;
}

// int32 job_queue_length = 4;
inline void GpuStatus::clear_job_queue_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_queue_length_ = 0;
}
inline ::int32_t GpuStatus::job_queue_length() const {
  // @@protoc_insertion_point(field_get:cabinet.GpuStatus.job_queue_length)
  return _internal_job_queue_length();
}
inline void GpuStatus::set_job_queue_length(::int32_t value) {
  _internal_set_job_queue_length(value);
  // @@protoc_insertion_point(field_set:cabinet.GpuStatus.job_queue_length)
}
inline ::int32_t GpuStatus::_internal_job_queue_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.job_queue_length_;
}
inline void GpuStatus::_internal_set_job_queue_length(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.job_queue_length_ = value;
}

// float memory_usage = 5;
inline void GpuStatus::clear_memory_usage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_usage_ = 0;
}
inline float GpuStatus::memory_usage() const {
  // @@protoc_insertion_point(field_get:cabinet.GpuStatus.memory_usage)
  return _internal_memory_usage();
}
inline void GpuStatus::set_memory_usage(float value) {
  _internal_set_memory_usage(value);
  // @@protoc_insertion_point(field_set:cabinet.GpuStatus.memory_usage)
}
inline float GpuStatus::_internal_memory_usage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.memory_usage_;
}
inline void GpuStatus::_internal_set_memory_usage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_usage_ = value;
}

// float temperature = 6;
inline void GpuStatus::clear_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = 0;
}
inline float GpuStatus::temperature() const {
  // @@protoc_insertion_point(field_get:cabinet.GpuStatus.temperature)
  return _internal_temperature();
}
inline void GpuStatus::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:cabinet.GpuStatus.temperature)
}
inline float GpuStatus::_internal_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temperature_;
}
inline void GpuStatus::_internal_set_temperature(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = value;
}

// float clock_freq = 7;
inline void GpuStatus::clear_clock_freq() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clock_freq_ = 0;
}
inline float GpuStatus::clock_freq() const {
  // @@protoc_insertion_point(field_get:cabinet.GpuStatus.clock_freq)
  return _internal_clock_freq();
}
inline void GpuStatus::set_clock_freq(float value) {
  _internal_set_clock_freq(value);
  // @@protoc_insertion_point(field_set:cabinet.GpuStatus.clock_freq)
}
inline float GpuStatus::_internal_clock_freq() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.clock_freq_;
}
inline void GpuStatus::_internal_set_clock_freq(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clock_freq_ = value;
}

// -------------------------------------------------------------------

// TaskStatus

// int32 task_id = 1;
inline void TaskStatus::clear_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_ = 0;
}
inline ::int32_t TaskStatus::task_id() const {
  // @@protoc_insertion_point(field_get:cabinet.TaskStatus.task_id)
  return _internal_task_id();
}
inline void TaskStatus::set_task_id(::int32_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:cabinet.TaskStatus.task_id)
}
inline ::int32_t TaskStatus::_internal_task_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_id_;
}
inline void TaskStatus::_internal_set_task_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_ = value;
}

// int32 assigned_board = 2;
inline void TaskStatus::clear_assigned_board() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.assigned_board_ = 0;
}
inline ::int32_t TaskStatus::assigned_board() const {
  // @@protoc_insertion_point(field_get:cabinet.TaskStatus.assigned_board)
  return _internal_assigned_board();
}
inline void TaskStatus::set_assigned_board(::int32_t value) {
  _internal_set_assigned_board(value);
  // @@protoc_insertion_point(field_set:cabinet.TaskStatus.assigned_board)
}
inline ::int32_t TaskStatus::_internal_assigned_board() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.assigned_board_;
}
inline void TaskStatus::_internal_set_assigned_board(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.assigned_board_ = value;
}

// int32 status = 3;
inline void TaskStatus::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::int32_t TaskStatus::status() const {
  // @@protoc_insertion_point(field_get:cabinet.TaskStatus.status)
  return _internal_status();
}
inline void TaskStatus::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:cabinet.TaskStatus.status)
}
inline ::int32_t TaskStatus::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_;
}
inline void TaskStatus::_internal_set_status(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// string submit_time = 4;
inline void TaskStatus::clear_submit_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.submit_time_.ClearToEmpty();
}
inline const std::string& TaskStatus::submit_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cabinet.TaskStatus.submit_time)
  return _internal_submit_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskStatus::set_submit_time(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.submit_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cabinet.TaskStatus.submit_time)
}
inline std::string* TaskStatus::mutable_submit_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_submit_time();
  // @@protoc_insertion_point(field_mutable:cabinet.TaskStatus.submit_time)
  return _s;
}
inline const std::string& TaskStatus::_internal_submit_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.submit_time_.Get();
}
inline void TaskStatus::_internal_set_submit_time(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.submit_time_.Set(value, GetArena());
}
inline std::string* TaskStatus::_internal_mutable_submit_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.submit_time_.Mutable( GetArena());
}
inline std::string* TaskStatus::release_submit_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cabinet.TaskStatus.submit_time)
  return _impl_.submit_time_.Release();
}
inline void TaskStatus::set_allocated_submit_time(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.submit_time_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.submit_time_.IsDefault()) {
    _impl_.submit_time_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cabinet.TaskStatus.submit_time)
}

// string start_time = 5;
inline void TaskStatus::clear_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_.ClearToEmpty();
}
inline const std::string& TaskStatus::start_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cabinet.TaskStatus.start_time)
  return _internal_start_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskStatus::set_start_time(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cabinet.TaskStatus.start_time)
}
inline std::string* TaskStatus::mutable_start_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:cabinet.TaskStatus.start_time)
  return _s;
}
inline const std::string& TaskStatus::_internal_start_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.start_time_.Get();
}
inline void TaskStatus::_internal_set_start_time(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_.Set(value, GetArena());
}
inline std::string* TaskStatus::_internal_mutable_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.start_time_.Mutable( GetArena());
}
inline std::string* TaskStatus::release_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cabinet.TaskStatus.start_time)
  return _impl_.start_time_.Release();
}
inline void TaskStatus::set_allocated_start_time(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.start_time_.IsDefault()) {
    _impl_.start_time_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cabinet.TaskStatus.start_time)
}

// string gpu_req = 6;
inline void TaskStatus::clear_gpu_req() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gpu_req_.ClearToEmpty();
}
inline const std::string& TaskStatus::gpu_req() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cabinet.TaskStatus.gpu_req)
  return _internal_gpu_req();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskStatus::set_gpu_req(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gpu_req_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cabinet.TaskStatus.gpu_req)
}
inline std::string* TaskStatus::mutable_gpu_req() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_gpu_req();
  // @@protoc_insertion_point(field_mutable:cabinet.TaskStatus.gpu_req)
  return _s;
}
inline const std::string& TaskStatus::_internal_gpu_req() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gpu_req_.Get();
}
inline void TaskStatus::_internal_set_gpu_req(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gpu_req_.Set(value, GetArena());
}
inline std::string* TaskStatus::_internal_mutable_gpu_req() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.gpu_req_.Mutable( GetArena());
}
inline std::string* TaskStatus::release_gpu_req() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cabinet.TaskStatus.gpu_req)
  return _impl_.gpu_req_.Release();
}
inline void TaskStatus::set_allocated_gpu_req(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gpu_req_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.gpu_req_.IsDefault()) {
    _impl_.gpu_req_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cabinet.TaskStatus.gpu_req)
}

// int32 deadline = 7;
inline void TaskStatus::clear_deadline() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deadline_ = 0;
}
inline ::int32_t TaskStatus::deadline() const {
  // @@protoc_insertion_point(field_get:cabinet.TaskStatus.deadline)
  return _internal_deadline();
}
inline void TaskStatus::set_deadline(::int32_t value) {
  _internal_set_deadline(value);
  // @@protoc_insertion_point(field_set:cabinet.TaskStatus.deadline)
}
inline ::int32_t TaskStatus::_internal_deadline() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deadline_;
}
inline void TaskStatus::_internal_set_deadline(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deadline_ = value;
}

// -------------------------------------------------------------------

// TaskAssignment

// int32 task_id = 1;
inline void TaskAssignment::clear_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_ = 0;
}
inline ::int32_t TaskAssignment::task_id() const {
  // @@protoc_insertion_point(field_get:cabinet.TaskAssignment.task_id)
  return _internal_task_id();
}
inline void TaskAssignment::set_task_id(::int32_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:cabinet.TaskAssignment.task_id)
}
inline ::int32_t TaskAssignment::_internal_task_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_id_;
}
inline void TaskAssignment::_internal_set_task_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_ = value;
}

// int32 assigned_board = 2;
inline void TaskAssignment::clear_assigned_board() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.assigned_board_ = 0;
}
inline ::int32_t TaskAssignment::assigned_board() const {
  // @@protoc_insertion_point(field_get:cabinet.TaskAssignment.assigned_board)
  return _internal_assigned_board();
}
inline void TaskAssignment::set_assigned_board(::int32_t value) {
  _internal_set_assigned_board(value);
  // @@protoc_insertion_point(field_set:cabinet.TaskAssignment.assigned_board)
}
inline ::int32_t TaskAssignment::_internal_assigned_board() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.assigned_board_;
}
inline void TaskAssignment::_internal_set_assigned_board(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.assigned_board_ = value;
}

// int32 status = 3;
inline void TaskAssignment::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::int32_t TaskAssignment::status() const {
  // @@protoc_insertion_point(field_get:cabinet.TaskAssignment.status)
  return _internal_status();
}
inline void TaskAssignment::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:cabinet.TaskAssignment.status)
}
inline ::int32_t TaskAssignment::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_;
}
inline void TaskAssignment::_internal_set_status(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// string submit_time = 4;
inline void TaskAssignment::clear_submit_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.submit_time_.ClearToEmpty();
}
inline const std::string& TaskAssignment::submit_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cabinet.TaskAssignment.submit_time)
  return _internal_submit_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskAssignment::set_submit_time(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.submit_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cabinet.TaskAssignment.submit_time)
}
inline std::string* TaskAssignment::mutable_submit_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_submit_time();
  // @@protoc_insertion_point(field_mutable:cabinet.TaskAssignment.submit_time)
  return _s;
}
inline const std::string& TaskAssignment::_internal_submit_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.submit_time_.Get();
}
inline void TaskAssignment::_internal_set_submit_time(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.submit_time_.Set(value, GetArena());
}
inline std::string* TaskAssignment::_internal_mutable_submit_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.submit_time_.Mutable( GetArena());
}
inline std::string* TaskAssignment::release_submit_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cabinet.TaskAssignment.submit_time)
  return _impl_.submit_time_.Release();
}
inline void TaskAssignment::set_allocated_submit_time(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.submit_time_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.submit_time_.IsDefault()) {
    _impl_.submit_time_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cabinet.TaskAssignment.submit_time)
}

// string start_time = 5;
inline void TaskAssignment::clear_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_.ClearToEmpty();
}
inline const std::string& TaskAssignment::start_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cabinet.TaskAssignment.start_time)
  return _internal_start_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskAssignment::set_start_time(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cabinet.TaskAssignment.start_time)
}
inline std::string* TaskAssignment::mutable_start_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:cabinet.TaskAssignment.start_time)
  return _s;
}
inline const std::string& TaskAssignment::_internal_start_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.start_time_.Get();
}
inline void TaskAssignment::_internal_set_start_time(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_.Set(value, GetArena());
}
inline std::string* TaskAssignment::_internal_mutable_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.start_time_.Mutable( GetArena());
}
inline std::string* TaskAssignment::release_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cabinet.TaskAssignment.start_time)
  return _impl_.start_time_.Release();
}
inline void TaskAssignment::set_allocated_start_time(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.start_time_.IsDefault()) {
    _impl_.start_time_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cabinet.TaskAssignment.start_time)
}

// string gpu_req = 6;
inline void TaskAssignment::clear_gpu_req() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gpu_req_.ClearToEmpty();
}
inline const std::string& TaskAssignment::gpu_req() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cabinet.TaskAssignment.gpu_req)
  return _internal_gpu_req();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskAssignment::set_gpu_req(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gpu_req_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cabinet.TaskAssignment.gpu_req)
}
inline std::string* TaskAssignment::mutable_gpu_req() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_gpu_req();
  // @@protoc_insertion_point(field_mutable:cabinet.TaskAssignment.gpu_req)
  return _s;
}
inline const std::string& TaskAssignment::_internal_gpu_req() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gpu_req_.Get();
}
inline void TaskAssignment::_internal_set_gpu_req(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gpu_req_.Set(value, GetArena());
}
inline std::string* TaskAssignment::_internal_mutable_gpu_req() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.gpu_req_.Mutable( GetArena());
}
inline std::string* TaskAssignment::release_gpu_req() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cabinet.TaskAssignment.gpu_req)
  return _impl_.gpu_req_.Release();
}
inline void TaskAssignment::set_allocated_gpu_req(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gpu_req_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.gpu_req_.IsDefault()) {
    _impl_.gpu_req_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cabinet.TaskAssignment.gpu_req)
}

// int32 deadline = 7;
inline void TaskAssignment::clear_deadline() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deadline_ = 0;
}
inline ::int32_t TaskAssignment::deadline() const {
  // @@protoc_insertion_point(field_get:cabinet.TaskAssignment.deadline)
  return _internal_deadline();
}
inline void TaskAssignment::set_deadline(::int32_t value) {
  _internal_set_deadline(value);
  // @@protoc_insertion_point(field_set:cabinet.TaskAssignment.deadline)
}
inline ::int32_t TaskAssignment::_internal_deadline() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deadline_;
}
inline void TaskAssignment::_internal_set_deadline(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deadline_ = value;
}

// -------------------------------------------------------------------

// Reply

// string reply = 1;
inline void Reply::clear_reply() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reply_.ClearToEmpty();
}
inline const std::string& Reply::reply() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cabinet.Reply.reply)
  return _internal_reply();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Reply::set_reply(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reply_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cabinet.Reply.reply)
}
inline std::string* Reply::mutable_reply() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reply();
  // @@protoc_insertion_point(field_mutable:cabinet.Reply.reply)
  return _s;
}
inline const std::string& Reply::_internal_reply() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reply_.Get();
}
inline void Reply::_internal_set_reply(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reply_.Set(value, GetArena());
}
inline std::string* Reply::_internal_mutable_reply() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reply_.Mutable( GetArena());
}
inline std::string* Reply::release_reply() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cabinet.Reply.reply)
  return _impl_.reply_.Release();
}
inline void Reply::set_allocated_reply(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reply_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reply_.IsDefault()) {
    _impl_.reply_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cabinet.Reply.reply)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace cabinet


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // gpu_5fstatus_2eproto_2epb_2eh
